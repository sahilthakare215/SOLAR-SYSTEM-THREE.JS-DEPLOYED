import { BaseEvent, EventDispatcher } from "three";
import { BaseEventMap } from "../core/BaseEventMap.js";
/**
 * An event that contains information about a value that was added or deleted.
 *
 * @param T - The type of the value.
 * @category Utils
 */
export interface SetEvent<T> extends BaseEvent {
    value: T;
}
/**
 * ObservableSet events.
 *
 * @param T - The type of the value.
 * @category Utils
 */
export interface ObservableSetEventMap<T> extends BaseEventMap {
    /**
     * Triggers when a single entry is added.
     *
     * @event
     */
    add: SetEvent<T>;
    /**
     * Triggers when a single entry is removed.
     *
     * Does not trigger when the set is cleared.
     *
     * @event
     */
    delete: SetEvent<T>;
    /**
     * Triggers right before the set is cleared.
     *
     * @event
     */
    clear: BaseEvent;
}
/**
 * A set that emits events when its data changes.
 *
 * @param T - The type of the values.
 * @category Utils
 */
export declare class ObservableSet<T> extends EventDispatcher<ObservableSetEventMap<T>> implements Set<T> {
    /**
     * The internal data collection.
     */
    private data;
    /**
     * Constructs a new set.
     *
     * @param iterable - A list of values to add to this set.
     */
    constructor(iterable?: Iterable<T>);
    get size(): number;
    get [Symbol.toStringTag](): string;
    [Symbol.iterator](): SetIterator<T>;
    clear(): void;
    delete(value: T): boolean;
    has(value: T): boolean;
    add(value: T): this;
    entries(): SetIterator<[T, T]>;
    keys(): SetIterator<T>;
    values(): SetIterator<T>;
    forEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: unknown): void;
}
