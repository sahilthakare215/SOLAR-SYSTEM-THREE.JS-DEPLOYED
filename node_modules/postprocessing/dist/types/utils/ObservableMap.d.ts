import { BaseEvent, EventDispatcher } from "three";
import { BaseEventMap } from "../core/BaseEventMap.js";
/**
 * An event that contains information about a map entry that was added or deleted.
 *
 * @param K - The type of the key.
 * @param V - The type of the value.
 * @category Utils
 */
export interface MapEvent<K, V> extends BaseEvent {
    key: K;
    value: V;
}
/**
 * ObservableMap events.
 *
 * @param K - The type of the key.
 * @param V - The type of the value.
 * @category Utils
 */
export interface ObservableMapEventMap<K, V> extends BaseEventMap {
    /**
     * Triggers when a single entry is added.
     *
     * @event
     */
    add: MapEvent<K, V>;
    /**
     * Triggers when a single entry is removed or overwritten.
     *
     * Does not trigger when the map is cleared.
     *
     * @event
     */
    delete: MapEvent<K, V>;
    /**
     * Triggers right before the maps is cleared.
     *
     * @event
     */
    clear: BaseEvent;
}
/**
 * A map that emits events when its data changes.
 *
 * @param K - The type of the keys.
 * @param V - The type of the values.
 * @category Utils
 */
export declare class ObservableMap<K, V> extends EventDispatcher<ObservableMapEventMap<K, V>> implements Map<K, V> {
    /**
     * The internal data collection.
     */
    private data;
    /**
     * Constructs a new map.
     *
     * @param iterable - A list of entries to add to this map.
     */
    constructor(iterable?: Iterable<readonly [K, V]>);
    get size(): number;
    get [Symbol.toStringTag](): string;
    clear(): void;
    delete(key: K): boolean;
    get(key: K): V | undefined;
    has(key: K): boolean;
    set(key: K, value: V): this;
    entries(): MapIterator<[K, V]>;
    keys(): MapIterator<K>;
    values(): MapIterator<V>;
    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: unknown): void;
    [Symbol.iterator](): MapIterator<[K, V]>;
}
