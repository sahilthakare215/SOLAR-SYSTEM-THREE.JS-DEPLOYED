import { EventDispatcher, Vector2Like } from "three";
import { BaseEventMap } from "../core/BaseEventMap.js";
/**
 * A resolution.
 *
 * @category Utils
 */
export declare class Resolution extends EventDispatcher<BaseEventMap> implements Vector2Like {
    /**
     * An auto sizing constant.
     *
     * Can be used to automatically calculate the width or height based on the original aspect ratio.
     */
    static readonly AUTO_SIZE = -1;
    /**
     * The unscaled base resolution in logical pixels.
    */
    private baseSize;
    /**
     * The unscaled preferred resolution in logical pixels.
     */
    private preferredSize;
    /**
     * The effective resolution in absolute pixels.
     */
    private effectiveSize;
    /**
     * @see {@link pixelRatio}
     */
    private _pixelRatio;
    /**
     * @see {@link scale}
     */
    private _scale;
    /**
     * Indicates whether this resolution is currently locked.
     *
     * A resolution will be locked for the duration of a `change` event dispatch.
     */
    private locked;
    /**
     * Constructs a new resolution.
     *
     * @param width - The preferred width.
     * @param height - The preferred height.
     * @param scale - A resolution scale.
     */
    constructor(width?: number, height?: number, scale?: number);
    /**
     * Calculates the effective size.
     */
    private updateEffectiveSize;
    /**
     * The effective width, calculated based on the preferred size, pixel ratio and resolution scale.
     */
    get width(): number;
    /**
     * The effective height, calculated based on the preferred size, pixel ratio and resolution scale.
     */
    get height(): number;
    /**
     * The aspect ratio.
     */
    get aspectRatio(): number;
    /**
     * The device pixel ratio.
     *
     * @defaultValue 1.0
     */
    get pixelRatio(): number;
    set pixelRatio(value: number);
    /**
     * The resolution scale.
     *
     * @defaultValue 1.0
     */
    get scale(): number;
    set scale(value: number);
    /**
     * The {@link pixelRatio} multiplied by the {@link scale}.
     */
    get scaledPixelRatio(): number;
    /**
     * The unscaled base width in logical pixels.
     *
     * @defaultValue 1
     */
    get baseWidth(): number;
    set baseWidth(value: number);
    /**
     * The unscaled base height in logical pixels.
     *
     * @defaultValue 1
     */
    get baseHeight(): number;
    set baseHeight(value: number);
    /**
     * Sets the base size in logical pixels.
     *
     * @param width - The width.
     * @param height - The height.
     */
    setBaseSize(width: number, height: number): void;
    /**
     * Alias for {@link setBaseSize}.
     *
     * @param width - The width.
     * @param height - The height.
     */
    setSize(width: number, height: number): void;
    /**
     * Copies the base size of a given resolution.
     *
     * @param resolution - A resolution.
     */
    copyBaseSize(resolution: Resolution): void;
    /**
     * The unscaled preferred width in logical pixels.
     *
     * @defaultValue {@link Resolution.AUTO_SIZE}
     */
    get preferredWidth(): number;
    set preferredWidth(value: number);
    /**
     * The unscaled preferred height in logical pixels.
     *
     * @defaultValue {@link Resolution.AUTO_SIZE}
     */
    get preferredHeight(): number;
    set preferredHeight(value: number);
    /**
     * Sets the preferred size in logical pixels.
     *
     * @param width - The width.
     * @param height - The height.
     */
    setPreferredSize(width: number, height: number): void;
    /**
     * Copies the preferred size of a given resolution.
     *
     * @param resolution - A resolution.
     */
    copyPreferredSize(resolution: Resolution): void;
    /**
     * Resets the preferred size to {@link AUTO_SIZE}.
     */
    resetPreferredSize(): void;
    /**
     * Copies the given resolution.
     *
     * @param resolution - The resolution.
     */
    copy(resolution: Resolution): void;
    /**
     * Checks if this resolution equals the given resolution.
     *
     * @param resolution - A resolution.
     * @return True if the resolutions are the same.
     */
    equals(resolution: Resolution): boolean;
    /**
     * Dispatches a `change` event.
     */
    setChanged(): void;
    get x(): number;
    get y(): number;
}
