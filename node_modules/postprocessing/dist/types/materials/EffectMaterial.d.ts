import { IUniform, Texture } from "three";
import { EffectShaderSection } from "../enums/EffectShaderSection.js";
import { FullscreenMaterial } from "./FullscreenMaterial.js";
/**
 * An effect material.
 *
 * @category Materials
 */
export declare class EffectMaterial extends FullscreenMaterial {
    /**
     * Keeps track of shader data.
     */
    private readonly shaderDataTracker;
    /**
     * Constructs a new effect material.
     */
    constructor();
    /**
     * The current gBuffer struct.
     */
    get gBuffer(): Record<string, Texture | null> | null;
    set gBuffer(value: Record<string, Texture | null>);
    /**
     * Indicates whether output color space conversion is enabled.
     */
    get colorSpaceConversion(): boolean;
    set colorSpaceConversion(value: boolean);
    /**
     * The current animation time in seconds.
     */
    get time(): number;
    set time(value: number);
    /**
     * Sets the shader parts.
     *
     * @param shaderParts - A collection of shader code snippets. See {@link EffectShaderSection}.
     * @return This material.
     */
    setShaderParts(shaderParts: Map<EffectShaderSection, string | null>): this;
    /**
     * Sets the shader macros.
     *
     * Macros that have previously been set will be removed before the new ones are added.
     *
     * @param defines - A collection of preprocessor macro definitions.
     * @return This material.
     */
    setDefines(defines: Map<string, string | number | boolean>): this;
    /**
     * Sets the shader uniforms.
     *
     * Uniforms that have previously been set will be removed before the new ones are added.
     *
     * @param uniforms - A collection of uniforms.
     * @return This material.
     */
    setUniforms(uniforms: Map<string, IUniform>): this;
    dispose(): void;
}
