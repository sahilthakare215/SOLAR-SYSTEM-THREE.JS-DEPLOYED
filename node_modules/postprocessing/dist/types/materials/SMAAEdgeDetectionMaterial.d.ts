import { Texture } from "three";
import { SMAAEdgeDetectionMode } from "../enums/SMAAEdgeDetectionMode.js";
import { SMAAPredicationMode } from "../enums/SMAAPredicationMode.js";
import { FullscreenMaterial } from "./FullscreenMaterial.js";
/**
 * An SMAA edge detection material.
 *
 * @category Materials
 */
export declare class SMAAEdgeDetectionMaterial extends FullscreenMaterial {
    /**
     * Constructs a new SMAA edge detection material.
     */
    constructor();
    /**
     * The depth buffer.
     */
    set depthBuffer(value: Texture | null);
    /**
     * The edge detection mode.
     *
     * @defaultValue {@link SMAAEdgeDetectionMode.COLOR}
     */
    get edgeDetectionMode(): SMAAEdgeDetectionMode;
    set edgeDetectionMode(value: SMAAEdgeDetectionMode);
    /**
     * The local contrast adaptation factor. Has no effect if the edge detection mode is set to DEPTH.
     *
     * If a neighbor edge has _factor_ times bigger contrast than the current edge, the edge will be discarded.
     *
     * This allows to eliminate spurious crossing edges and is based on the fact that if there is too much contrast in a
     * direction, the perceptual contrast in the other neighbors will be hidden.
     *
     * @defaultValue 2
     */
    get localContrastAdaptationFactor(): number;
    set localContrastAdaptationFactor(value: number);
    /**
     * The edge detection threshold. Range: [0.0, 0.5].
     *
     * A lower value results in more edges being detected at the expense of performance.
     *
     * For luma- and chroma-based edge detection, 0.1 is a reasonable value and allows to catch most visible edges. 0.05
     * is a rather overkill value that allows to catch 'em all. Darker scenes may require an even lower threshold.
     *
     * If depth-based edge detection is used, the threshold must be adjusted to match the scene depth distribution.
     *
     * @defaultValue 0.05
     */
    get edgeDetectionThreshold(): number;
    set edgeDetectionThreshold(value: number);
    /**
     * The predication mode.
     *
     * Predicated thresholding allows to better preserve texture details and to improve edge detection using an additional
     * buffer such as a light accumulation or depth buffer.
     *
     * @defaultValue {@link SMAAPredicationMode.DISABLED}
     */
    get predicationMode(): SMAAPredicationMode;
    set predicationMode(value: SMAAPredicationMode);
    /**
     * Indicates whether the predication buffer uses high precision.
     */
    private get predicationBufferPrecisionHigh();
    private set predicationBufferPrecisionHigh(value);
    /**
     * The predication buffer.
     *
     * If this buffer uses high precision, the macro `PREDICATIONBUFFER_PRECISION_HIGH` will be defined.
     */
    set predicationBuffer(value: Texture | null);
    /**
     * The predication threshold.
     *
     * @defaultValue 0.0002
     */
    get predicationThreshold(): number;
    set predicationThreshold(value: number);
    /**
     * The predication scale. Range: [1.0, 5.0].
     *
     * Determines how much the edge detection threshold should be scaled when using predication.
     *
     * @defaultValue 2
     */
    get predicationScale(): number;
    set predicationScale(value: number);
    /**
     * The predication strength. Range: [0.0, 1.0].
     *
     * Determines how much the edge detection threshold should be decreased locally when using predication.
     *
     * @defaultValue 1
     */
    get predicationStrength(): number;
    set predicationStrength(value: number);
}
