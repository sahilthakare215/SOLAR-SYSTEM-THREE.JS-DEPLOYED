import { ColorSpace } from "three";
import { LookupTexture } from "../textures/lut/LookupTexture.js";
import { Effect } from "./Effect.js";
/**
 * LUT3DEffect options.
 *
 * @category Effects
 */
export interface LUT3DEffectOptions {
    /**
     * The LUT.
     */
    lut?: LookupTexture | null;
    /**
     * Indicates whether tetrahedral interpolation is enabled.
     *
     * Tetrahedral interpolation produces highly accurate results but is slower than hardware interpolation.
     *
     * @defaultValue false
     */
    tetrahedralInterpolation?: boolean;
    /**
     * The input color space.
     *
     * @defaultValue SRGBColorSpace
     */
    inputColorSpace?: ColorSpace;
}
/**
 * A 3D LUT effect.
 *
 * The tetrahedral interpolation algorithm was inspired by an implementation from OpenColorIO which is licensed under
 * the BSD 3-Clause License.
 *
 * @see https://developer.nvidia.com/gpugems/gpugems2/part-iii-high-quality-rendering/chapter-24-using-lookup-tables-accelerate-color
 * @see https://www.nvidia.com/content/GTC/posters/2010/V01-Real-Time-Color-Space-Conversion-for-High-Resolution-Video.pdf
 * @see https://github.com/AcademySoftwareFoundation/OpenColorIO/blob/master/src/OpenColorIO/ops/lut3d/
 * @see https://github.com/gkjohnson/threejs-sandbox/tree/master/3d-lut
 * @category Effects
 */
export declare class LUT3DEffect extends Effect implements LUT3DEffectOptions {
    /**
     * Constructs a new LUT effect.
     *
     * @param options - The options.
     */
    constructor({ lut, tetrahedralInterpolation, inputColorSpace }?: LUT3DEffectOptions);
    /**
     * Indicates whether the LUT uses high precision.
     */
    private get lutPrecisionHigh();
    private set lutPrecisionHigh(value);
    get lut(): LookupTexture | null;
    set lut(value: LookupTexture | null);
    /**
     * Updates the scale and offset for the LUT sampling coordinates.
     */
    private updateScaleOffset;
    /**
     * Configures parameters for tetrahedral interpolation.
     */
    private configureTetrahedralInterpolation;
    get tetrahedralInterpolation(): boolean;
    set tetrahedralInterpolation(value: boolean);
}
