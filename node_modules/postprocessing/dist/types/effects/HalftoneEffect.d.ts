import { HalftoneShape } from "../enums/HalftoneShape.js";
import { Effect } from "./Effect.js";
/**
 * HalftoneEffect options.
 *
 * @category Effects
 */
export interface HalftoneEffectOptions {
    /**
     * The halftone shape.
     *
     * @defaultValue {@link HalftoneShape.DOT}
     */
    shape?: HalftoneShape;
    /**
     * The pattern radius.
     *
     * @defaultValue 6.0
     */
    radius?: number;
    /**
     * The grid rotation for all color channels in radians.
     *
     * This setting yields better performance compared to individual rotations per channel.
     *
     * @defaultValue 0
     */
    rotation?: number;
    /**
     * The grid rotation for the red channel in radians.
     *
     * @defaultValue {@link rotation}
     */
    rotationR?: number;
    /**
     * The grid rotation for the green channel in radians.
     *
     * @defaultValue {@link rotationR}
     */
    rotationG?: number;
    /**
     * The grid rotation for the blue channel in radians.
     *
     * @defaultValue {@link rotationG}
     */
    rotationB?: number;
    /**
     * The halftone scatter factor.
     *
     * @defaultValue 0
     */
    scatterFactor?: number;
    /**
     * The sample count.
     *
     * @defaultValue 8
     */
    samples?: number;
}
/**
 * A halftone effect.
 *
 * @category Effects
 * @see https://github.com/meatbags/after-effects-plugins/blob/master/Halftone/HalftoneSampler.hpp
 * @see https://github.com/mrdoob/three.js/blob/0bf3908b73b2cf73d7361cce17cfc8b816cb2a00/examples/jsm/postprocessing/HalftonePass.js
 */
export declare class HalftoneEffect extends Effect implements HalftoneEffectOptions {
    /**
     * @see {@link radius}
     */
    private _radius;
    /**
     * Constructs a new halftone effect.
     *
     * @param options - The options.
     */
    constructor({ shape, radius, rotation, rotationR, rotationG, rotationB, scatterFactor, samples }?: HalftoneEffectOptions);
    get shape(): HalftoneShape;
    set shape(value: HalftoneShape);
    get samples(): number;
    set samples(value: number);
    get radius(): number;
    set radius(value: number);
    get scatterFactor(): number;
    set scatterFactor(value: number);
    set rotation(value: number);
    get rotationR(): number;
    set rotationR(value: number);
    get rotationG(): number;
    set rotationG(value: number);
    get rotationB(): number;
    set rotationB(value: number);
    /**
     * Enables or disables RGB rotation based on the current rotation settings.
     */
    private updateRGBRotation;
    protected onResolutionChange(): void;
}
