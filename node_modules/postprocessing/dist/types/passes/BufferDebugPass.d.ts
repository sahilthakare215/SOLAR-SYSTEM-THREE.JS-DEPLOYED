import { Pass } from "../core/Pass.js";
import { GBuffer } from "../enums/GBuffer.js";
import { BufferDebugMaterial } from "../materials/BufferDebugMaterial.js";
import { GBufferDebug } from "../enums/GBufferDebug.js";
/**
 * A debug pass that visualizes all input buffers.
 *
 * @remarks This pass should always be added last.
 * @category Passes
 */
export declare class BufferDebugPass extends Pass<BufferDebugMaterial> {
    /**
     * The size of each texture view relative to the screen size.
     *
     * @defaultValue 0.1
     */
    viewSize: number;
    /**
     * Limits the amount of texture views per row.
     *
     * @defaultValue 4
     */
    columns: number;
    /**
     * @see {@link bufferFocus}
     */
    private _bufferFocus;
    /**
     * A list of meshes that are used to render the input textures.
     */
    private views;
    /**
     * A scene that contains the debug meshes.
     */
    private debugScene;
    /**
     * A debug camera.
     */
    private debugCamera;
    /**
     * Constructs a new buffer debug pass.
     *
     * @param gBufferComponents - G-Buffer components that should be rendered and visualized.
     */
    constructor(gBufferComponents?: Set<GBuffer>);
    /**
     * The name of the buffer that should be rendered in fullscreen mode.
     *
     * The value must match with one of the buffer names. G-Buffer textures use the string value of the respective
     * {@link GBuffer} component as their name.
     *
     * @see {@link GBuffer} for rendering specific G-Buffer components.
     * @see {@link GBufferDebug} for computed G-Buffer components.
     */
    get bufferFocus(): string | null;
    set bufferFocus(value: GBuffer | GBufferDebug | string | null);
    /**
     * Sets the input buffer based on the currently selected buffer.
     */
    private updateInputBuffer;
    /**
     * Updates the texture views.
     */
    private updateViews;
    protected onResolutionChange(): void;
    protected onInputChange(): void;
    render(): void;
}
