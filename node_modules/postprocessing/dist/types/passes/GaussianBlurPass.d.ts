import { TextureResource } from "../core/io/TextureResource.js";
import { Pass } from "../core/Pass.js";
import { GaussianBlurMaterial } from "../materials/GaussianBlurMaterial.js";
/**
 * GaussianBlurPass constructor options.
 *
 * @category Passes
 */
export interface GaussianBlurPassOptions {
    /**
     * The kernel size. Should be an odd number in the range [3, 1020].
     *
     * @defaultValue 35
     */
    kernelSize?: number;
    /**
     * The amount of times the blur should be applied.
     *
     * @defaultValue 1
     */
    iterations?: number;
}
/**
 * A Gaussian blur pass.
 *
 * @category Passes
 */
export declare class GaussianBlurPass extends Pass<GaussianBlurMaterial> implements GaussianBlurPassOptions {
    /**
     * Identifies the first blur buffer.
     */
    private static readonly BUFFER_A;
    /**
     * Identifies the second blur buffer.
     */
    private static readonly BUFFER_B;
    iterations: number;
    /**
     * Constructs a new Gaussian blur pass.
     *
     * @param options - The options.
     */
    constructor({ kernelSize, iterations }?: GaussianBlurPassOptions);
    /**
     * The blur material.
     */
    private get blurMaterial();
    get kernelSize(): number;
    set kernelSize(value: number);
    /**
     * The first blur render target.
     */
    private get renderTargetA();
    /**
     * The second blur render target.
     */
    private get renderTargetB();
    /**
     * A texture that contains the blurred result.
     */
    get texture(): TextureResource;
    protected onInputChange(): void;
    protected onResolutionChange(): void;
    render(): void;
}
