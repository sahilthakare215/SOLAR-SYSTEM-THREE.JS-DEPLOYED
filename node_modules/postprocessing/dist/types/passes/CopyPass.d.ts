import { WebGLRenderer, WebGLRenderTarget } from "three";
import { Pass } from "../core/Pass.js";
import { CopyMaterial } from "../materials/CopyMaterial.js";
/**
 * Copies the contents of the default input buffer to another buffer or to screen.
 *
 * @category Passes
 */
export declare class CopyPass extends Pass<CopyMaterial> {
    /**
     * Indicates whether {@link WebGLRenderer.copyTextureToTexture} should be used for copying. Depending on the device
     * and graphics backend, this operation can be faster or slower than a fullscreen copy shader.
     *
     * This feature is disabled by default because it tends to be slower in most cases.
     *
     * @defaultValue false
     */
    static blitEnabled: boolean;
    /**
     * Constructs a new copy pass.
     *
     * @param outputBuffer - An output buffer. If not provided, a new framebuffer will be created.
     */
    constructor(outputBuffer?: WebGLRenderTarget);
    get renderer(): WebGLRenderer | null;
    set renderer(value: WebGLRenderer | null);
    /**
     * Initializes the current output buffer.
     */
    private initializeOutputBuffer;
    /**
     * Configures the depth buffer for copying.
     */
    private configureDepthBuffer;
    protected onInputChange(): void;
    protected onOutputChange(): void;
    protected onResolutionChange(): void;
    /**
     * Rapidly copies the input buffer into the output buffer.
     *
     * @return True, if the operation was successful.
     */
    private blit;
    render(): void;
}
