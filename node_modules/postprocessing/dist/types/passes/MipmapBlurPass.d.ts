import { TextureResource } from "../core/io/TextureResource.js";
import { Pass } from "../core/Pass.js";
import { DownsamplingMaterial, DownsamplingMaterialOptions } from "../materials/DownsamplingMaterial.js";
import { UpsamplingMaterial, UpsamplingMaterialOptions } from "../materials/UpsamplingMaterial.js";
/**
 * MipmapBlurPass constructor options.
 *
 * @category Passes
 */
export interface MipmapBlurPassOptions extends DownsamplingMaterialOptions, UpsamplingMaterialOptions {
    /**
     * The amount of MIP levels.
     *
     * At 720p 8 steps are likely too much, while at 4K they might not be enough. Must be greater than 0.
     *
     * @defaultValue 8
     */
    levels?: number;
    /**
     * Controls whether the image should be scaled up to the original resolution.
     *
     * If disabled, the upsampling process will stop at half resolution.
     *
     * @defaultValue false
     */
    fullResolutionUpsampling?: boolean;
}
/**
 * A blur pass that produces a wide blur by downsampling and upsampling the input over multiple MIP levels.
 *
 * Based on an article by Fabrice Piquet.
 *
 * @see https://www.froyok.fr/blog/2021-12-ue4-custom-bloom/
 * @category Passes
 */
export declare class MipmapBlurPass extends Pass<DownsamplingMaterial | UpsamplingMaterial> implements MipmapBlurPassOptions {
    /**
     * Identifies the main output buffer.
     */
    private static readonly BUFFER_MAIN;
    /**
     * The mipmaps used for downsampling.
     */
    private downsamplingMipmaps;
    /**
     * The mipmaps used for upsampling.
     */
    private upsamplingMipmaps;
    /**
     * A downsampling material.
     */
    private downsamplingMaterial;
    /**
     * An upsampling material.
    */
    private upsamplingMaterial;
    /**
     * @see {@link fullResolutionUpsampling}
    */
    private _fullResolutionUpsampling;
    /**
     * Constructs a new mipmap blur pass.
     *
     * @param options - The options.
     */
    constructor({ levels, radius, fullResolutionUpsampling, clampToBorder }?: MipmapBlurPassOptions);
    /**
     * The output texture.
     */
    get texture(): TextureResource;
    get clampToBorder(): boolean;
    set clampToBorder(value: boolean);
    get radius(): number;
    set radius(value: number);
    get levels(): number;
    set levels(value: number);
    get fullResolutionUpsampling(): boolean;
    set fullResolutionUpsampling(value: boolean);
    /**
     * Updates the mipmap render targets.
     *
     * @param levels - The mipmap level count.
     */
    private createMipmaps;
    protected onInputChange(): void;
    protected onResolutionChange(): void;
    render(): void;
}
