import { Material } from "three";
import { Pass } from "../core/Pass.js";
import { Effect } from "../effects/Effect.js";
import { EffectMaterial } from "../materials/EffectMaterial.js";
/**
 * An effect pass.
 *
 * Use this pass to combine {@link Effect} instances.
 *
 * @category Passes
 */
export declare class EffectPass extends Pass<EffectMaterial> {
    /**
     * An effect material manager.
     */
    private readonly effectMaterialManager;
    /**
     * An event listener that calls {@link handleEffectEvent}.
     */
    private readonly effectListener;
    /**
     * An event listener that calls {@link handleGBufferConfigEvent}.
     */
    private readonly gBufferConfigListener;
    /**
     * Keeps track of the previous G-Buffer configuration.
     */
    private previousGBufferConfig;
    /**
     * Indicates whether this pass has been disposed.
     *
     * If true, resources will be refreshed before the next render operation.
     */
    private disposed;
    /**
     * An animation time scale.
     */
    timeScale: number;
    /**
     * Constructs a new effect pass.
     *
     * @param effects - The effects that will be rendered by this pass.
     */
    constructor(...effects: Effect[]);
    get subpasses(): readonly Pass<Material | null>[];
    private set subpasses(value);
    /**
     * The effects.
     *
     * @throws If there are duplicate effects or if the effects cannot be merged.
     */
    get effects(): readonly Effect[];
    set effects(value: Effect[]);
    /**
     * Controls whether dithering is enabled.
     */
    get dithering(): boolean;
    set dithering(value: boolean);
    /**
     * Copies the G-Buffer components of the given effect.
     *
     * @param effect - The effect.
     */
    private copyGBufferComponents;
    /**
     * Updates the fullscreen material based on the current effect combination.
     *
     * The required material will be swapped in if it exists. Otherwise, a new material will be created.
     *
     * @param invalidateCache - Controls whether the material cache should be rebuild.
     * @throws If the current effects cannot be merged.
     */
    protected updateMaterial(invalidateCache: boolean): void;
    /**
     * Updates the G-Buffer struct uniform.
     */
    private updateGBufferStruct;
    /**
     * Handles {@link Effect} events.
     *
     * @param event - An event.
     */
    private handleEffectEvent;
    /**
     * Handles {@link GBufferConfig} events.
     *
     * @param event - An event.
     */
    private handleGBufferConfigEvent;
    /**
     * Performs tasks when the {@link GBufferConfig} has changed.
     */
    private onGBufferConfigChange;
    protected onInputChange(): void;
    checkRequirements(): void;
    compile(): Promise<void>;
    dispose(): void;
    render(): void;
}
