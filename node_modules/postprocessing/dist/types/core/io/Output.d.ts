import { EventDispatcher, IUniform, WebGLRenderTarget } from "three";
import { BaseEventMap } from "../BaseEventMap.js";
import { Disposable } from "../Disposable.js";
import { ShaderData } from "../ShaderData.js";
import { RenderTargetResource } from "./RenderTargetResource.js";
/**
 * Output resources.
 *
 * @category IO
 */
export declare class Output extends EventDispatcher<BaseEventMap> implements Disposable, ShaderData {
    /**
     * Identifies the default output buffer in the {@link renderTargets} collection.
     */
    static readonly BUFFER_DEFAULT = "BUFFER_DEFAULT";
    readonly defines: Map<string, string | number | boolean>;
    readonly uniforms: Map<string, IUniform>;
    /**
     * Output render targets.
     */
    readonly renderTargets: Map<string, RenderTargetResource>;
    /**
     * Constructs new output resources.
     */
    constructor();
    /**
     * Alias for {@link renderTargets}.
     */
    get buffers(): Map<string, RenderTargetResource>;
    /**
     * Indicates whether a default output buffer has been set.
     */
    get hasDefaultBuffer(): boolean;
    /**
     * The default output buffer.
     */
    get defaultBuffer(): RenderTargetResource | null;
    set defaultBuffer(value: RenderTargetResource | WebGLRenderTarget | null);
    /**
     * Indicates whether the default buffer uses high precision.
     */
    get frameBufferPrecisionHigh(): boolean;
    /**
     * Sets a buffer.
     *
     * A new resource will be created if the buffer doesn't already exist.
     *
     * @param key - A buffer key.
     * @param value - The buffer.
     */
    setBuffer(key: string, value: RenderTargetResource | WebGLRenderTarget | null): void;
    /**
     * Retrieves a buffer.
     *
     * @param key - A buffer key.
     * @return The buffer, or `null` if it doesn't exist.
     */
    getBuffer(key: string): WebGLRenderTarget | null;
    /**
     * Removes the default buffer.
     *
     * @return True if the buffer existed and has been removed, or false if it doesn't exist.
     */
    removeDefaultBuffer(): boolean;
    dispose(): void;
}
