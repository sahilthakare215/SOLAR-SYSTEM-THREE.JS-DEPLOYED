import { EventDispatcher, IUniform, Texture } from "three";
import { GBuffer } from "../../enums/GBuffer.js";
import { GBufferConfig } from "../../utils/gbuffer/GBufferConfig.js";
import { BaseEventMap } from "../BaseEventMap.js";
import { Disposable } from "../Disposable.js";
import { ShaderData } from "../ShaderData.js";
import { TextureResource } from "./TextureResource.js";
/**
 * Input resources.
 *
 * @category IO
 */
export declare class Input extends EventDispatcher<BaseEventMap> implements Disposable, ShaderData {
    /**
     * Identifies the default input buffer in the {@link textures} collection.
     */
    static readonly BUFFER_DEFAULT = "BUFFER_DEFAULT";
    readonly defines: Map<string, string | number | boolean>;
    readonly uniforms: Map<string, IUniform>;
    /**
     * Required {@link GBuffer} components.
     *
     * {@link GBuffer.COLOR} is included by default.
     */
    readonly gBuffer: Set<GBuffer | string>;
    /**
     * Input textures.
     *
     * Entries specified in {@link gBuffer} will be added automatically.
     */
    readonly textures: Map<GBuffer | string, TextureResource>;
    /**
     * @see {@link gBufferConfig}.
     */
    private _gBufferConfig;
    /**
     * An event listener that triggers a `change` event.
     */
    private readonly propagateChangeEvent;
    /**
     * Constructs new input resources.
     */
    constructor();
    set gBufferConfig(value: GBufferConfig | null);
    /**
     * Alias for {@link textures}.
     */
    get buffers(): Map<GBuffer | string, TextureResource>;
    /**
     * Indicates whether a default input buffer has been set.
     */
    get hasDefaultBuffer(): boolean;
    /**
     * The default input buffer.
     */
    get defaultBuffer(): TextureResource | null;
    set defaultBuffer(value: TextureResource | Texture | null);
    /**
     * Indicates whether the default buffer uses high precision.
     */
    get frameBufferPrecisionHigh(): boolean;
    /**
     * Sets a buffer.
     *
     * A new resource will be created if the buffer doesn't already exist.
     *
     * @param key - A buffer key.
     * @param value - The buffer.
     */
    setBuffer(key: string, value: TextureResource | Texture | null): void;
    /**
     * Retrieves a buffer.
     *
     * @param key - A buffer key.
     * @return The buffer, or `null` if it doesn't exist.
     */
    getBuffer(key: string): Texture | null;
    /**
     * Removes the default buffer.
     *
     * @return True if the buffer existed and has been removed, or false if it doesn't exist.
     */
    removeDefaultBuffer(): boolean;
    dispose(): void;
}
