import { EventDispatcher } from "three";
import { BaseEventMap } from "../BaseEventMap.js";
import { Identifiable } from "../Identifiable.js";
/**
 * A resource wrapper base class.
 *
 * @param T - The type of the internal value.
 * @category IO
 */
export declare abstract class Resource<T = unknown> extends EventDispatcher<BaseEventMap> implements Identifiable {
    /**
     * An ID manager.
     */
    private static idManager;
    readonly id: number;
    /**
     * @see {@link value}
     */
    private _value;
    /**
     * @see {@link overrideValue}
     */
    private _overrideValue;
    /**
     * Indicates whether this resource is currently muted.
     *
     * Muted resources don't dispatch `change` events.
     */
    private muted;
    /**
     * Indicates whether this resource is currently locked.
     *
     * A resource will be locked for the duration of a `change` event dispatch.
     */
    private locked;
    /**
     * Constructs a new resource wrapper.
     *
     * @param value - A resource value.
     */
    constructor(value: T | null);
    /**
     * The value of this resource.
     */
    get value(): T | null;
    set value(value: T | null);
    set overrideValue(value: T | null);
}
