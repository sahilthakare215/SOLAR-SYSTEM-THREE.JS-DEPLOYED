import { RenderPipeline } from "../RenderPipeline.js";
/**
 * An I/O manager.
 *
 * @category IO
 */
export declare class IOManager {
    /**
     * A collection of active render pipelines.
     */
    private readonly pipelines;
    /**
     * A resource manager.
     */
    private readonly resourceManager;
    /**
     * Keeps track of the original output default buffers.
     *
     * @see {@link RenderPipeline.autoRenderToScreen}
     */
    private readonly outputDefaultBuffers;
    /**
     * Indicates whether this manager is currently updating resources.
     */
    private updating;
    /**
     * Constructs a new I/O manager.
     */
    constructor();
    /**
     * Updates the input buffers of all passes in a given pipeline.
     *
     * @param pipeline - The pipeline to update.
     */
    private updateInput;
    /**
     * Restores the original output buffers.
     *
     * @param passes - The passes to update.
     */
    private restoreOutputBuffers;
    /**
     * Updates the output buffers of all passes in a given pipeline.
     *
     * @param pipeline - The pipeline to update.
     */
    private updateOutput;
    /**
     * Adds a render pipeline.
     *
     * @param pipeline - The pipeline to add.
     */
    addPipeline(pipeline: RenderPipeline): void;
    /**
     * Removes a render pipeline.
     *
     * @param pipeline - The pipeline to remove.
     */
    removePipeline(pipeline: RenderPipeline): void;
    /**
     * Updates the input and output resources of a given pipeline.
     *
     * @param pipeline - The pipeline to update.
     */
    private updatePipeline;
    /**
     * Updates the input and output resources of all pipelines.
     */
    update(): void;
    /**
     * Returns the main geometry pass of the given pipeline.
     *
     * @param pipeline - A pipeline.
     * @return The geometry pass, or undefined if there is none.
     */
    private static findMainGeometryPass;
    /**
     * Collects all required G-Buffer components for a given pipeline.
     *
     * @param pipeline - The pipeline.
     */
    private static gatherGBufferComponents;
    /**
     * Assigns G-Buffer components to a given pass.
     *
     * @param pass - A pass.
     * @param geoPass - The main geometry pass.
     */
    private static assignGBufferTextures;
}
