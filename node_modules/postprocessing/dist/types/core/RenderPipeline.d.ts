import { Material, Vector4, WebGLRenderer } from "three";
import { ImmutableTimer } from "../utils/ImmutableTimer.js";
import { Resolution } from "../utils/Resolution.js";
import { Disposable } from "./Disposable.js";
import { Renderable } from "./Renderable.js";
import { Resizable } from "./Resizable.js";
import { Pass } from "./Pass.js";
/**
 * A render pipeline that can be used to group and run passes.
 *
 * @category Core
 */
export declare class RenderPipeline implements Disposable, Renderable, Resizable {
    /**
     * A shared I/O manager.
     */
    private static readonly ioManager;
    /**
     * Keeps track of passes that have been added to a pipeline.
     */
    private static readonly registeredPasses;
    /**
     * A listener that triggers an I/O update.
     */
    private static readonly listener;
    /**
     * @see {@link timer}
     */
    private _timer;
    /**
     * @see {@link passes}
     */
    private _passes;
    /**
     * @see {@link renderer}
     */
    private _renderer;
    /**
     * @see {@link autoRenderToScreen}
     */
    private _autoRenderToScreen;
    /**
     * The current resolution.
     *
     * @see {@link updateStyle} to control whether the style of the canvas should be updated.
     */
    readonly resolution: Resolution;
    /**
     * Determines whether the style of the canvas should be updated when the resolution is changed.
     *
     * @defaultValue true
     */
    updateStyle: boolean;
    /**
     * Constructs a new render pipeline.
     *
     * @param renderer - A renderer.
     */
    constructor(renderer?: WebGLRenderer | null);
    /**
     * Determines whether the last pass should automatically render to screen.
     *
     * @defaultValue true
     */
    get autoRenderToScreen(): boolean;
    set autoRenderToScreen(value: boolean);
    /**
     * The renderer.
     */
    get renderer(): WebGLRenderer | null;
    set renderer(value: WebGLRenderer | null);
    /**
     * The internal timer.
     */
    get timer(): ImmutableTimer;
    /**
     * A list of all registered passes.
     */
    get passes(): readonly Pass<Material | null>[];
    /**
     * Registers a pass.
     *
     * @param pass - The pass.
     */
    private registerPass;
    /**
     * Unregisters a pass.
     *
     * @param pass - The pass.
     */
    private unregisterPass;
    /**
     * Adds one or more passes.
     *
     * @throws If one of the passes has already been added to a pipeline.
     * @param passes - The passes to add.
     */
    add(...passes: Pass<Material | null>[]): void;
    /**
     * Removes one or more passes.
     *
     * @param passes - The passes to remove.
     */
    remove(...passes: Pass<Material | null>[]): void;
    /**
     * Removes all passes.
     */
    removeAllPasses(): void;
    /**
     * Handles resolution change events.
     */
    private onResolutionChange;
    /**
     * Sets the device pixel ratio.
     *
     * @param pixelRatio - The pixel ratio.
     */
    setPixelRatio(pixelRatio: number): void;
    /**
     * Sets the render size.
     *
     * @param width - The width in logical pixels (before pixel ratio).
     * @param height - The height in logical pixels (before pixel ratio).
     * @param updateStyle - Whether the style of the canvas should be updated. Default is `true`.
     */
    setSize(width: number, height: number, updateStyle?: boolean): void;
    /**
     * Sets the viewport for all passes.
     *
     * Please note that viewport settings need to be enabled on a per-pass basis to take effect.
     *
     * @param x - The X-offset starting in the lower left corner, or a vector that describes the viewport.
     * @param y - The Y-offset starting in the lower left corner.
     * @param width - The width in logical pixels (before pixel ratio).
     * @param height - The height in logical pixels (before pixel ratio).
     */
    setViewport(x: number | Vector4, y?: number, width?: number, height?: number): void;
    /**
     * Sets the scissor region for all passes.
     *
     * Please note that scissor settings need to be enabled on a per-pass basis to take effect.
     *
     * @param x - The X-offset, or a vector that describes the scissor region.
     * @param y - The Y-offset starting in the lower left corner.
     * @param width - The width in logical pixels (before pixel ratio).
     * @param height - The height in logical pixels (before pixel ratio).
     */
    setScissor(x: number | Vector4, y?: number, width?: number, height?: number): void;
    /**
     * Compiles all passes in this pipeline.
     *
     * @return A promise that resolves when the compilation has finished.
     */
    compile(): Promise<void>;
    /**
     * Renders this pipeline.
     *
     * This method should be called once per frame via `requestAnimationFrame`.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame
     * @param timestamp - The current time in milliseconds.
     */
    render(timestamp?: number): void;
    dispose(): void;
}
