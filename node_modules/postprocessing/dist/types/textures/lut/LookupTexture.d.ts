import { Data3DTexture, DataTexture, Texture } from "three";
/**
 * A 3D lookup texture (LUT).
 *
 * @category Textures
 */
export declare class LookupTexture extends Data3DTexture {
    /**
     * Constructs a cubic 3D lookup texture.
     *
     * @param data - The pixel data. The default format is RGBA.
     * @param size - The sidelength.
     */
    constructor(data: BufferSource | null, size: number);
    /**
     * Creates an upscaled LUT using tetrahedral interpolation.
     *
     * @param size - The target sidelength.
     * @param transferData - Extra fast mode that modifies the data of this LUT. Disable to keep the original data intact.
     * @return A promise that resolves with a new LUT upon completion.
     */
    scaleUp(size: number, transferData?: boolean): Promise<LookupTexture>;
    /**
     * Applies the given LUT to this one.
     *
     * @param lut - A LUT. Must have the same dimensions, type and format as this LUT.
     * @return This texture.
     */
    applyLUT(lut: LookupTexture): this;
    /**
     * Converts the LUT data into unsigned byte data.
     *
     * This is a lossy operation which should only be performed after all other transformations have been applied.
     *
     * @return This texture.
     */
    convertToUint8(): this;
    /**
     * Converts the LUT data into float data.
     *
     * @return This texture.
     */
    convertToFloat(): this;
    /**
     * Converts the output of this LUT into sRGB color space.
     *
     * @return This texture.
     */
    convertLinearToSRGB(): this;
    /**
     * Converts the output of this LUT into linear color space.
     *
     * @return This texture.
     */
    convertSRGBToLinear(): this;
    /**
     * Converts this LUT into a 2D data texture.
     *
     * Custom {@link LUTDomainBounds} are stored as `userData.domainBounds`.
     *
     * @return The texture.
     */
    toDataTexture(): DataTexture;
    /**
     * Clones this texture.
     *
     * @return The cloned texture.
     */
    clone(): this;
    /**
     * Creates a new 3D LUT by copying a given LUT.
     *
     * Supports common image-based 2D textures.
     *
     * @param texture - The LUT. Assumed to be cubic.
     * @return A new 3D LUT.
     */
    static from(texture: Texture): LookupTexture;
    /**
     * Creates a neutral 3D LUT.
     *
     * @param size - The sidelength.
     * @return A neutral 3D LUT.
     */
    static createNeutral(size: number): LookupTexture;
}
